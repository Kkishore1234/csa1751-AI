import itertools

def is_solution(assignment, s1, s2, s3):
    num1 = int("".join(str(assignment[ch]) for ch in s1))
    num2 = int("".join(str(assignment[ch]) for ch in s2))
    num3 = int("".join(str(assignment[ch]) for ch in s3))
    return num1 + num2 == num3

def cryptarithmetic_solver(s1, s2, s3):
    unique_chars = set(s1 + s2 + s3)
    if len(unique_chars) > 10:
        return "Too many letters to map to digits."
    for perm in itertools.permutations(range(10), len(unique_chars)):
        assignment = dict(zip(unique_chars, perm))
        if assignment[s1[0]] == 0 or assignment[s2[0]] == 0 or assignment[s3[0]] == 0:
            continue
        if is_solution(assignment, s1, s2, s3):
            return assignment
    return "No solution found."

s1 = "SEND"
s2 = "MORE"
s3 = "MONEY"

result = cryptarithmetic_solver(s1, s2, s3)

if isinstance(result, dict):
    print("Solution found:")
    for letter, digit in result.items():
        print(f"{letter} -> {digit}")
else:
    print(result)
